/* tslint:disable */
/* eslint-disable */
/*
Seel API

Seel API

The version of the OpenAPI document: 1.3.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Event } from '../models';
// @ts-ignore
import { EventCreateNewEventRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create events
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {EventCreateNewEventRequest} eventCreateNewEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEvent: async (xSeelApiKey: string, xSeelApiVersion: string, partner: string, eventCreateNewEventRequest: EventCreateNewEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('createNewEvent', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('createNewEvent', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('createNewEvent', 'partner', partner)
            // verify required parameter 'eventCreateNewEventRequest' is not null or undefined
            assertParamExists('createNewEvent', 'eventCreateNewEventRequest', eventCreateNewEventRequest)
            const localVarPath = `/{partner}/events`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventCreateNewEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/events',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreateNewEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create events
         * @param {EventApiCreateNewEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEvent(requestParameters: EventApiCreateNewEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const eventCreateNewEventRequest: EventCreateNewEventRequest = {
                session_id: requestParameters.session_id,
                event_ts: requestParameters.event_ts,
                customer_id: requestParameters.customer_id,
                device_id: requestParameters.device_id,
                client_ip: requestParameters.client_ip,
                event_source: requestParameters.event_source,
                event_type: requestParameters.event_type,
                event_info: requestParameters.event_info
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEvent(requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, eventCreateNewEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * 
         * @summary Create events
         * @param {EventApiCreateNewEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEvent(requestParameters: EventApiCreateNewEventRequest, options?: AxiosRequestConfig): AxiosPromise<Event> {
            return localVarFp.createNewEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEvent operation in EventApi.
 * @export
 * @interface EventApiCreateNewEventRequest
 */
export type EventApiCreateNewEventRequest = {
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof EventApiCreateNewEvent
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof EventApiCreateNewEvent
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof EventApiCreateNewEvent
    */
    readonly partner: string
    
} & EventCreateNewEventRequest

/**
 * EventApiGenerated - object-oriented interface
 * @export
 * @class EventApiGenerated
 * @extends {BaseAPI}
 */
export class EventApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create events
     * @param {EventApiCreateNewEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiGenerated
     */
    public createNewEvent(requestParameters: EventApiCreateNewEventRequest, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).createNewEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
