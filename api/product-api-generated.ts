/* tslint:disable */
/* eslint-disable */
/*
Seel API

Seel API

The version of the OpenAPI document: 1.3.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Product } from '../models';
// @ts-ignore
import { ProductAddNewProductRequest } from '../models';
// @ts-ignore
import { ProductAddNewProductRequestDimensions } from '../models';
// @ts-ignore
import { ProductAddNewProductRequestIdentifiers } from '../models';
// @ts-ignore
import { ProductAddNewProductRequestManufacturerWarranty } from '../models';
// @ts-ignore
import { ProductAddNewProductRequestProductAttributes } from '../models';
// @ts-ignore
import { ProductAddNewProductRequestWeight } from '../models';
// @ts-ignore
import { ProductBatchCreateProductsRequest } from '../models';
// @ts-ignore
import { ProductBatchCreateProductsResponse } from '../models';
// @ts-ignore
import { ProductPlan } from '../models';
// @ts-ignore
import { ProductUpdateProductDetailsRequest } from '../models';
// @ts-ignore
import { ProductUpdateProductDetailsRequestDimensions } from '../models';
// @ts-ignore
import { ProductUpdateProductDetailsRequestIdentifiers } from '../models';
// @ts-ignore
import { ProductUpdateProductDetailsRequestManufacturerWarranty } from '../models';
// @ts-ignore
import { ProductUpdateProductDetailsRequestProductAttributes } from '../models';
// @ts-ignore
import { ProductUpdateProductDetailsRequestWeight } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a product
         * @param {string} partner partner name
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {ProductAddNewProductRequest} productAddNewProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProduct: async (partner: string, xSeelApiKey: string, xSeelApiVersion: string, productAddNewProductRequest: ProductAddNewProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('addNewProduct', 'partner', partner)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('addNewProduct', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('addNewProduct', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'productAddNewProductRequest' is not null or undefined
            assertParamExists('addNewProduct', 'productAddNewProductRequest', productAddNewProductRequest)
            const localVarPath = `/{partner}/products`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productAddNewProductRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/products',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productAddNewProductRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Batch create products
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {ProductBatchCreateProductsRequest} productBatchCreateProductsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateProducts: async (xSeelApiKey: string, xSeelApiVersion: string, partner: string, productBatchCreateProductsRequest: ProductBatchCreateProductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('batchCreateProducts', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('batchCreateProducts', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('batchCreateProducts', 'partner', partner)
            // verify required parameter 'productBatchCreateProductsRequest' is not null or undefined
            assertParamExists('batchCreateProducts', 'productBatchCreateProductsRequest', productBatchCreateProductsRequest)
            const localVarPath = `/{partner}/products/batch`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productBatchCreateProductsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/products/batch',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productBatchCreateProductsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a product
         * @param {string} productId ID of the product
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (productId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductById', 'productId', productId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('getProductById', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('getProductById', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('getProductById', 'partner', partner)
            const localVarPath = `/{partner}/products/{product_id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/products/{product_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product plans
         * @param {string} productId ID of the product
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlans: async (productId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('listPlans', 'productId', productId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('listPlans', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('listPlans', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listPlans', 'partner', partner)
            const localVarPath = `/{partner}/products/{product_id}/plans`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/products/{product_id}/plans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a product
         * @param {string} productId ID of the product
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProductById: async (productId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('removeProductById', 'productId', productId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('removeProductById', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('removeProductById', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('removeProductById', 'partner', partner)
            const localVarPath = `/{partner}/products/{product_id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/products/{product_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a product
         * @param {string} productId ID of the product
         * @param {string} partner partner name
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {ProductUpdateProductDetailsRequest} productUpdateProductDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDetails: async (productId: string, partner: string, xSeelApiKey: string, xSeelApiVersion: string, productUpdateProductDetailsRequest: ProductUpdateProductDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProductDetails', 'productId', productId)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('updateProductDetails', 'partner', partner)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('updateProductDetails', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('updateProductDetails', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'productUpdateProductDetailsRequest' is not null or undefined
            assertParamExists('updateProductDetails', 'productUpdateProductDetailsRequest', productUpdateProductDetailsRequest)
            const localVarPath = `/{partner}/products/{product_id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productUpdateProductDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/products/{product_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateProductDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a product
         * @param {ProductApiAddNewProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewProduct(requestParameters: ProductApiAddNewProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const productAddNewProductRequest: ProductAddNewProductRequest = {
                merchant_id: requestParameters.merchant_id,
                variant_id: requestParameters.variant_id,
                product_id: requestParameters.product_id,
                product_title: requestParameters.product_title,
                variant_title: requestParameters.variant_title,
                brand_name: requestParameters.brand_name,
                manufacturer: requestParameters.manufacturer,
                category_1: requestParameters.category_1,
                category_2: requestParameters.category_2,
                category_3: requestParameters.category_3,
                category_4: requestParameters.category_4,
                product_description: requestParameters.product_description,
                image_url: requestParameters.image_url,
                price: requestParameters.price,
                currency: requestParameters.currency,
                requires_shipping: requestParameters.requires_shipping,
                model_number: requestParameters.model_number,
                condition: requestParameters.condition,
                sku: requestParameters.sku,
                identifiers: requestParameters.identifiers,
                manufacturer_warranty: requestParameters.manufacturer_warranty,
                dimensions: requestParameters.dimensions,
                weight: requestParameters.weight,
                product_attributes: requestParameters.product_attributes,
                created_ts: requestParameters.created_ts,
                updated_ts: requestParameters.updated_ts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewProduct(requestParameters.partner, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, productAddNewProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Batch create products
         * @param {ProductApiBatchCreateProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchCreateProducts(requestParameters: ProductApiBatchCreateProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBatchCreateProductsResponse>> {
            const productBatchCreateProductsRequest: ProductBatchCreateProductsRequest = {
                products: requestParameters.products
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchCreateProducts(requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, productBatchCreateProductsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a product
         * @param {ProductApiGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(requestParameters: ProductApiGetProductByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(requestParameters.productId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get product plans
         * @param {ProductApiListPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlans(requestParameters: ProductApiListPlansRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductPlan>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlans(requestParameters.productId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a product
         * @param {ProductApiRemoveProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProductById(requestParameters: ProductApiRemoveProductByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProductById(requestParameters.productId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a product
         * @param {ProductApiUpdateProductDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductDetails(requestParameters: ProductApiUpdateProductDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const productUpdateProductDetailsRequest: ProductUpdateProductDetailsRequest = {
                merchant_id: requestParameters.requestBody.merchant_id,
                variant_id: requestParameters.requestBody.variant_id,
                product_id: requestParameters.requestBody.product_id,
                product_title: requestParameters.requestBody.product_title,
                variant_title: requestParameters.requestBody.variant_title,
                brand_name: requestParameters.requestBody.brand_name,
                manufacturer: requestParameters.requestBody.manufacturer,
                category_1: requestParameters.requestBody.category_1,
                category_2: requestParameters.requestBody.category_2,
                category_3: requestParameters.requestBody.category_3,
                category_4: requestParameters.requestBody.category_4,
                product_description: requestParameters.requestBody.product_description,
                image_url: requestParameters.requestBody.image_url,
                price: requestParameters.requestBody.price,
                currency: requestParameters.requestBody.currency,
                requires_shipping: requestParameters.requestBody.requires_shipping,
                model_number: requestParameters.requestBody.model_number,
                condition: requestParameters.requestBody.condition,
                sku: requestParameters.requestBody.sku,
                identifiers: requestParameters.requestBody.identifiers,
                manufacturer_warranty: requestParameters.requestBody.manufacturer_warranty,
                dimensions: requestParameters.requestBody.dimensions,
                weight: requestParameters.requestBody.weight,
                product_attributes: requestParameters.requestBody.product_attributes,
                created_ts: requestParameters.requestBody.created_ts,
                updated_ts: requestParameters.requestBody.updated_ts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductDetails(requestParameters.productId, requestParameters.partner, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, productUpdateProductDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a product
         * @param {ProductApiAddNewProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProduct(requestParameters: ProductApiAddNewProductRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.addNewProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Batch create products
         * @param {ProductApiBatchCreateProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateProducts(requestParameters: ProductApiBatchCreateProductsRequest, options?: AxiosRequestConfig): AxiosPromise<ProductBatchCreateProductsResponse> {
            return localVarFp.batchCreateProducts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a product
         * @param {ProductApiGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(requestParameters: ProductApiGetProductByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.getProductById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product plans
         * @param {ProductApiListPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlans(requestParameters: ProductApiListPlansRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductPlan>> {
            return localVarFp.listPlans(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a product
         * @param {ProductApiRemoveProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProductById(requestParameters: ProductApiRemoveProductByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.removeProductById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a product
         * @param {ProductApiUpdateProductDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDetails(requestParameters: ProductApiUpdateProductDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.updateProductDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewProduct operation in ProductApi.
 * @export
 * @interface ProductApiAddNewProductRequest
 */
export type ProductApiAddNewProductRequest = {
    
    /**
    * partner name
    * @type {string}
    * @memberof ProductApiAddNewProduct
    */
    readonly partner: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof ProductApiAddNewProduct
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof ProductApiAddNewProduct
    */
    readonly xSeelApiVersion: string
    
} & ProductAddNewProductRequest

/**
 * Request parameters for batchCreateProducts operation in ProductApi.
 * @export
 * @interface ProductApiBatchCreateProductsRequest
 */
export type ProductApiBatchCreateProductsRequest = {
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof ProductApiBatchCreateProducts
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof ProductApiBatchCreateProducts
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof ProductApiBatchCreateProducts
    */
    readonly partner: string
    
} & ProductBatchCreateProductsRequest

/**
 * Request parameters for getProductById operation in ProductApi.
 * @export
 * @interface ProductApiGetProductByIdRequest
 */
export type ProductApiGetProductByIdRequest = {
    
    /**
    * ID of the product
    * @type {string}
    * @memberof ProductApiGetProductById
    */
    readonly productId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof ProductApiGetProductById
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof ProductApiGetProductById
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof ProductApiGetProductById
    */
    readonly partner: string
    
}

/**
 * Request parameters for listPlans operation in ProductApi.
 * @export
 * @interface ProductApiListPlansRequest
 */
export type ProductApiListPlansRequest = {
    
    /**
    * ID of the product
    * @type {string}
    * @memberof ProductApiListPlans
    */
    readonly productId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof ProductApiListPlans
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof ProductApiListPlans
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof ProductApiListPlans
    */
    readonly partner: string
    
}

/**
 * Request parameters for removeProductById operation in ProductApi.
 * @export
 * @interface ProductApiRemoveProductByIdRequest
 */
export type ProductApiRemoveProductByIdRequest = {
    
    /**
    * ID of the product
    * @type {string}
    * @memberof ProductApiRemoveProductById
    */
    readonly productId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof ProductApiRemoveProductById
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof ProductApiRemoveProductById
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof ProductApiRemoveProductById
    */
    readonly partner: string
    
}

/**
 * Request parameters for updateProductDetails operation in ProductApi.
 * @export
 * @interface ProductApiUpdateProductDetailsRequest
 */
export type ProductApiUpdateProductDetailsRequest = {
    /**
    * ID of the product
    * @type {string}
    * @memberof ProductApiUpdateProductDetails
    */
    readonly productId: string
    /**
    * partner name
    * @type {string}
    * @memberof ProductApiUpdateProductDetails
    */
    readonly partner: string
    /**
    * Your Seel API key
    * @type {string}
    * @memberof ProductApiUpdateProductDetails
    */
    readonly xSeelApiKey: string
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof ProductApiUpdateProductDetails
    */
    readonly xSeelApiVersion: string
    /**
    * 
    * @type {ProductUpdateProductDetailsRequest}
    * @memberof ProductApiUpdateProductDetails
    */
    readonly requestBody: ProductUpdateProductDetailsRequest
}

/**
 * ProductApiGenerated - object-oriented interface
 * @export
 * @class ProductApiGenerated
 * @extends {BaseAPI}
 */
export class ProductApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a product
     * @param {ProductApiAddNewProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public addNewProduct(requestParameters: ProductApiAddNewProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).addNewProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Batch create products
     * @param {ProductApiBatchCreateProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public batchCreateProducts(requestParameters: ProductApiBatchCreateProductsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).batchCreateProducts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a product
     * @param {ProductApiGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public getProductById(requestParameters: ProductApiGetProductByIdRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product plans
     * @param {ProductApiListPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public listPlans(requestParameters: ProductApiListPlansRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listPlans(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a product
     * @param {ProductApiRemoveProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public removeProductById(requestParameters: ProductApiRemoveProductByIdRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).removeProductById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a product
     * @param {ProductApiUpdateProductDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public updateProductDetails(requestParameters: ProductApiUpdateProductDetailsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateProductDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
