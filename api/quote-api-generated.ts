/* tslint:disable */
/* eslint-disable */
/*
Seel API

Seel API

The version of the OpenAPI document: 1.3.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { Item } from '../models';
// @ts-ignore
import { Quote } from '../models';
// @ts-ignore
import { QuoteGenerateQuoteRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * QuoteApi - axios parameter creator
 * @export
 */
export const QuoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a quote
         * @param {string} partner partner name
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {QuoteGenerateQuoteRequest} quoteGenerateQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuote: async (partner: string, xSeelApiKey: string, xSeelApiVersion: string, quoteGenerateQuoteRequest: QuoteGenerateQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('generateQuote', 'partner', partner)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('generateQuote', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('generateQuote', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'quoteGenerateQuoteRequest' is not null or undefined
            assertParamExists('generateQuote', 'quoteGenerateQuoteRequest', quoteGenerateQuoteRequest)
            const localVarPath = `/{partner}/quotes`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quoteGenerateQuoteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/quotes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quoteGenerateQuoteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a quote
         * @param {string} quoteId ID of the quote
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (quoteId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            assertParamExists('getById', 'quoteId', quoteId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('getById', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('getById', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('getById', 'partner', partner)
            const localVarPath = `/{partner}/quotes/{quote_id}`
                .replace(`{${"quote_id"}}`, encodeURIComponent(String(quoteId !== undefined ? quoteId : `-quote_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/quotes/{quote_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuoteApi - functional programming interface
 * @export
 */
export const QuoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a quote
         * @param {QuoteApiGenerateQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQuote(requestParameters: QuoteApiGenerateQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quote>> {
            const quoteGenerateQuoteRequest: QuoteGenerateQuoteRequest = {
                cart_id: requestParameters.cart_id,
                merchant_id: requestParameters.merchant_id,
                session_id: requestParameters.session_id,
                device_id: requestParameters.device_id,
                client_ip: requestParameters.client_ip,
                type: requestParameters.type,
                line_items: requestParameters.line_items,
                shipping_address: requestParameters.shipping_address,
                customer: requestParameters.customer,
                extra_info: requestParameters.extra_info
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQuote(requestParameters.partner, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, quoteGenerateQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a quote
         * @param {QuoteApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: QuoteApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.quoteId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuoteApi - factory interface
 * @export
 */
export const QuoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuoteApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a quote
         * @param {QuoteApiGenerateQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuote(requestParameters: QuoteApiGenerateQuoteRequest, options?: AxiosRequestConfig): AxiosPromise<Quote> {
            return localVarFp.generateQuote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a quote
         * @param {QuoteApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: QuoteApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Quote> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateQuote operation in QuoteApi.
 * @export
 * @interface QuoteApiGenerateQuoteRequest
 */
export type QuoteApiGenerateQuoteRequest = {
    
    /**
    * partner name
    * @type {string}
    * @memberof QuoteApiGenerateQuote
    */
    readonly partner: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof QuoteApiGenerateQuote
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof QuoteApiGenerateQuote
    */
    readonly xSeelApiVersion: string
    
} & QuoteGenerateQuoteRequest

/**
 * Request parameters for getById operation in QuoteApi.
 * @export
 * @interface QuoteApiGetByIdRequest
 */
export type QuoteApiGetByIdRequest = {
    
    /**
    * ID of the quote
    * @type {string}
    * @memberof QuoteApiGetById
    */
    readonly quoteId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof QuoteApiGetById
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof QuoteApiGetById
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof QuoteApiGetById
    */
    readonly partner: string
    
}

/**
 * QuoteApiGenerated - object-oriented interface
 * @export
 * @class QuoteApiGenerated
 * @extends {BaseAPI}
 */
export class QuoteApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a quote
     * @param {QuoteApiGenerateQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApiGenerated
     */
    public generateQuote(requestParameters: QuoteApiGenerateQuoteRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).generateQuote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a quote
     * @param {QuoteApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuoteApiGenerated
     */
    public getById(requestParameters: QuoteApiGetByIdRequest, options?: AxiosRequestConfig) {
        return QuoteApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
