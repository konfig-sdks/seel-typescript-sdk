/* tslint:disable */
/* eslint-disable */
/*
Seel API

Seel API

The version of the OpenAPI document: 1.3.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { Item } from '../models';
// @ts-ignore
import { Order } from '../models';
// @ts-ignore
import { OrderBatchCreateOrdersRequest } from '../models';
// @ts-ignore
import { OrderBatchCreateOrdersResponse } from '../models';
// @ts-ignore
import { OrderCreateNewOrderRequest } from '../models';
// @ts-ignore
import { OrderCreateNewOrderRequestSeelServicesInner } from '../models';
// @ts-ignore
import { OrderUpdateOrderDetailsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Batch create orders
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {OrderBatchCreateOrdersRequest} orderBatchCreateOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateOrders: async (xSeelApiKey: string, xSeelApiVersion: string, partner: string, orderBatchCreateOrdersRequest: OrderBatchCreateOrdersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('batchCreateOrders', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('batchCreateOrders', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('batchCreateOrders', 'partner', partner)
            // verify required parameter 'orderBatchCreateOrdersRequest' is not null or undefined
            assertParamExists('batchCreateOrders', 'orderBatchCreateOrdersRequest', orderBatchCreateOrdersRequest)
            const localVarPath = `/{partner}/orders/batch`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderBatchCreateOrdersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/batch',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderBatchCreateOrdersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel an order
         * @param {string} orderId ID of the order
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderById: async (orderId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('cancelOrderById', 'orderId', orderId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('cancelOrderById', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('cancelOrderById', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('cancelOrderById', 'partner', partner)
            const localVarPath = `/{partner}/orders/{order_id}/cancel`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}/cancel',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an order
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {OrderCreateNewOrderRequest} orderCreateNewOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrder: async (xSeelApiKey: string, xSeelApiVersion: string, partner: string, orderCreateNewOrderRequest: OrderCreateNewOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('createNewOrder', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('createNewOrder', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('createNewOrder', 'partner', partner)
            // verify required parameter 'orderCreateNewOrderRequest' is not null or undefined
            assertParamExists('createNewOrder', 'orderCreateNewOrderRequest', orderCreateNewOrderRequest)
            const localVarPath = `/{partner}/orders`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderCreateNewOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderCreateNewOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an order
         * @param {string} orderId ID of the order
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (orderId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getById', 'orderId', orderId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('getById', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('getById', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('getById', 'partner', partner)
            const localVarPath = `/{partner}/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an order
         * @param {string} orderId ID of the order
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {OrderUpdateOrderDetailsRequest} orderUpdateOrderDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderDetails: async (orderId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, orderUpdateOrderDetailsRequest: OrderUpdateOrderDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateOrderDetails', 'orderId', orderId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('updateOrderDetails', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('updateOrderDetails', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('updateOrderDetails', 'partner', partner)
            // verify required parameter 'orderUpdateOrderDetailsRequest' is not null or undefined
            assertParamExists('updateOrderDetails', 'orderUpdateOrderDetailsRequest', orderUpdateOrderDetailsRequest)
            const localVarPath = `/{partner}/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderUpdateOrderDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderUpdateOrderDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Batch create orders
         * @param {OrderApiBatchCreateOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchCreateOrders(requestParameters: OrderApiBatchCreateOrdersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderBatchCreateOrdersResponse>> {
            const orderBatchCreateOrdersRequest: OrderBatchCreateOrdersRequest = {
                orders: requestParameters.orders
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchCreateOrders(requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, orderBatchCreateOrdersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel an order
         * @param {OrderApiCancelOrderByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrderById(requestParameters: OrderApiCancelOrderByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrderById(requestParameters.orderId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create an order
         * @param {OrderApiCreateNewOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewOrder(requestParameters: OrderApiCreateNewOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const orderCreateNewOrderRequest: OrderCreateNewOrderRequest = {
                order_id: requestParameters.order_id,
                order_number: requestParameters.order_number,
                session_id: requestParameters.session_id,
                cart_id: requestParameters.cart_id,
                merchant_id: requestParameters.merchant_id,
                device_id: requestParameters.device_id,
                client_ip: requestParameters.client_ip,
                created_ts: requestParameters.created_ts,
                line_items: requestParameters.line_items,
                shipping_address: requestParameters.shipping_address,
                customer: requestParameters.customer,
                seel_services: requestParameters.seel_services,
                extra_info: requestParameters.extra_info
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewOrder(requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, orderCreateNewOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an order
         * @param {OrderApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: OrderApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.orderId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an order
         * @param {OrderApiUpdateOrderDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderDetails(requestParameters: OrderApiUpdateOrderDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const orderUpdateOrderDetailsRequest: OrderUpdateOrderDetailsRequest = {
                updated_ts: requestParameters.updated_ts,
                line_items: requestParameters.line_items,
                shipping_address: requestParameters.shipping_address,
                customer: requestParameters.customer,
                extra_info: requestParameters.extra_info
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderDetails(requestParameters.orderId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, orderUpdateOrderDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @summary Batch create orders
         * @param {OrderApiBatchCreateOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateOrders(requestParameters: OrderApiBatchCreateOrdersRequest, options?: AxiosRequestConfig): AxiosPromise<OrderBatchCreateOrdersResponse> {
            return localVarFp.batchCreateOrders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel an order
         * @param {OrderApiCancelOrderByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderById(requestParameters: OrderApiCancelOrderByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.cancelOrderById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an order
         * @param {OrderApiCreateNewOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrder(requestParameters: OrderApiCreateNewOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.createNewOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an order
         * @param {OrderApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: OrderApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an order
         * @param {OrderApiUpdateOrderDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderDetails(requestParameters: OrderApiUpdateOrderDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.updateOrderDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for batchCreateOrders operation in OrderApi.
 * @export
 * @interface OrderApiBatchCreateOrdersRequest
 */
export type OrderApiBatchCreateOrdersRequest = {
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof OrderApiBatchCreateOrders
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof OrderApiBatchCreateOrders
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof OrderApiBatchCreateOrders
    */
    readonly partner: string
    
} & OrderBatchCreateOrdersRequest

/**
 * Request parameters for cancelOrderById operation in OrderApi.
 * @export
 * @interface OrderApiCancelOrderByIdRequest
 */
export type OrderApiCancelOrderByIdRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof OrderApiCancelOrderById
    */
    readonly orderId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof OrderApiCancelOrderById
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof OrderApiCancelOrderById
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof OrderApiCancelOrderById
    */
    readonly partner: string
    
}

/**
 * Request parameters for createNewOrder operation in OrderApi.
 * @export
 * @interface OrderApiCreateNewOrderRequest
 */
export type OrderApiCreateNewOrderRequest = {
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof OrderApiCreateNewOrder
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof OrderApiCreateNewOrder
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof OrderApiCreateNewOrder
    */
    readonly partner: string
    
} & OrderCreateNewOrderRequest

/**
 * Request parameters for getById operation in OrderApi.
 * @export
 * @interface OrderApiGetByIdRequest
 */
export type OrderApiGetByIdRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof OrderApiGetById
    */
    readonly orderId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof OrderApiGetById
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof OrderApiGetById
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof OrderApiGetById
    */
    readonly partner: string
    
}

/**
 * Request parameters for updateOrderDetails operation in OrderApi.
 * @export
 * @interface OrderApiUpdateOrderDetailsRequest
 */
export type OrderApiUpdateOrderDetailsRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof OrderApiUpdateOrderDetails
    */
    readonly orderId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof OrderApiUpdateOrderDetails
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof OrderApiUpdateOrderDetails
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof OrderApiUpdateOrderDetails
    */
    readonly partner: string
    
} & OrderUpdateOrderDetailsRequest

/**
 * OrderApiGenerated - object-oriented interface
 * @export
 * @class OrderApiGenerated
 * @extends {BaseAPI}
 */
export class OrderApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Batch create orders
     * @param {OrderApiBatchCreateOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiGenerated
     */
    public batchCreateOrders(requestParameters: OrderApiBatchCreateOrdersRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).batchCreateOrders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel an order
     * @param {OrderApiCancelOrderByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiGenerated
     */
    public cancelOrderById(requestParameters: OrderApiCancelOrderByIdRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).cancelOrderById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an order
     * @param {OrderApiCreateNewOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiGenerated
     */
    public createNewOrder(requestParameters: OrderApiCreateNewOrderRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).createNewOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an order
     * @param {OrderApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiGenerated
     */
    public getById(requestParameters: OrderApiGetByIdRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an order
     * @param {OrderApiUpdateOrderDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiGenerated
     */
    public updateOrderDetails(requestParameters: OrderApiUpdateOrderDetailsRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).updateOrderDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
