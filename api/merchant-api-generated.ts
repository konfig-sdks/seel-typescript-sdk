/* tslint:disable */
/* eslint-disable */
/*
Seel API

Seel API

The version of the OpenAPI document: 1.3.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Merchant } from '../models';
// @ts-ignore
import { MerchantCreateNewMerchantRequest } from '../models';
// @ts-ignore
import { MerchantCreateNewMerchantRequestSeelServicesInner } from '../models';
// @ts-ignore
import { MerchantListAllMerchantsResponse } from '../models';
// @ts-ignore
import { MerchantUpdateMerchantDetailsRequest } from '../models';
// @ts-ignore
import { MerchantUpdateMerchantDetailsRequestSeelServicesInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MerchantApi - axios parameter creator
 * @export
 */
export const MerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a merchant
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {MerchantCreateNewMerchantRequest} merchantCreateNewMerchantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMerchant: async (xSeelApiKey: string, xSeelApiVersion: string, partner: string, merchantCreateNewMerchantRequest: MerchantCreateNewMerchantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('createNewMerchant', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('createNewMerchant', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('createNewMerchant', 'partner', partner)
            // verify required parameter 'merchantCreateNewMerchantRequest' is not null or undefined
            assertParamExists('createNewMerchant', 'merchantCreateNewMerchantRequest', merchantCreateNewMerchantRequest)
            const localVarPath = `/{partner}/merchants`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: merchantCreateNewMerchantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/merchants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(merchantCreateNewMerchantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a merchant
         * @param {string} merchantId ID of the merchant
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDetails: async (merchantId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('getMerchantDetails', 'merchantId', merchantId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('getMerchantDetails', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('getMerchantDetails', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('getMerchantDetails', 'partner', partner)
            const localVarPath = `/{partner}/merchants/{merchant_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId !== undefined ? merchantId : `-merchant_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/merchants/{merchant_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List merchants
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {number} [page] Query by page, default 0
         * @param {number} [pageSize] Query by page_size, default 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMerchants: async (xSeelApiKey: string, xSeelApiVersion: string, partner: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('listAllMerchants', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('listAllMerchants', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listAllMerchants', 'partner', partner)
            const localVarPath = `/{partner}/merchants`
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/merchants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a merchant
         * @param {string} merchantId ID of the merchant
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {MerchantUpdateMerchantDetailsRequest} merchantUpdateMerchantDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMerchantDetails: async (merchantId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, merchantUpdateMerchantDetailsRequest: MerchantUpdateMerchantDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('updateMerchantDetails', 'merchantId', merchantId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('updateMerchantDetails', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('updateMerchantDetails', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('updateMerchantDetails', 'partner', partner)
            // verify required parameter 'merchantUpdateMerchantDetailsRequest' is not null or undefined
            assertParamExists('updateMerchantDetails', 'merchantUpdateMerchantDetailsRequest', merchantUpdateMerchantDetailsRequest)
            const localVarPath = `/{partner}/merchants/{merchant_id}`
                .replace(`{${"merchant_id"}}`, encodeURIComponent(String(merchantId !== undefined ? merchantId : `-merchant_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: merchantUpdateMerchantDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/merchants/{merchant_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(merchantUpdateMerchantDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApi - functional programming interface
 * @export
 */
export const MerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a merchant
         * @param {MerchantApiCreateNewMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewMerchant(requestParameters: MerchantApiCreateNewMerchantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const merchantCreateNewMerchantRequest: MerchantCreateNewMerchantRequest = {
                shop_id: requestParameters.shop_id,
                admin_domain: requestParameters.admin_domain,
                shop_domain: requestParameters.shop_domain,
                shop_platform: requestParameters.shop_platform,
                shop_currency: requestParameters.shop_currency,
                shop_name: requestParameters.shop_name,
                contact_name: requestParameters.contact_name,
                contact_email: requestParameters.contact_email,
                contact_phone_number: requestParameters.contact_phone_number,
                seel_services: requestParameters.seel_services
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewMerchant(requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, merchantCreateNewMerchantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a merchant
         * @param {MerchantApiGetMerchantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantDetails(requestParameters: MerchantApiGetMerchantDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantDetails(requestParameters.merchantId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List merchants
         * @param {MerchantApiListAllMerchantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllMerchants(requestParameters: MerchantApiListAllMerchantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantListAllMerchantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllMerchants(requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a merchant
         * @param {MerchantApiUpdateMerchantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMerchantDetails(requestParameters: MerchantApiUpdateMerchantDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const merchantUpdateMerchantDetailsRequest: MerchantUpdateMerchantDetailsRequest = {
                shop_id: requestParameters.shop_id,
                admin_domain: requestParameters.admin_domain,
                shop_domain: requestParameters.shop_domain,
                shop_platform: requestParameters.shop_platform,
                shop_currency: requestParameters.shop_currency,
                shop_name: requestParameters.shop_name,
                contact_name: requestParameters.contact_name,
                contact_email: requestParameters.contact_email,
                contact_phone_number: requestParameters.contact_phone_number,
                seel_services: requestParameters.seel_services
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMerchantDetails(requestParameters.merchantId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, merchantUpdateMerchantDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantApi - factory interface
 * @export
 */
export const MerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a merchant
         * @param {MerchantApiCreateNewMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMerchant(requestParameters: MerchantApiCreateNewMerchantRequest, options?: AxiosRequestConfig): AxiosPromise<Merchant> {
            return localVarFp.createNewMerchant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a merchant
         * @param {MerchantApiGetMerchantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDetails(requestParameters: MerchantApiGetMerchantDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Merchant> {
            return localVarFp.getMerchantDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List merchants
         * @param {MerchantApiListAllMerchantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllMerchants(requestParameters: MerchantApiListAllMerchantsRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantListAllMerchantsResponse> {
            return localVarFp.listAllMerchants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a merchant
         * @param {MerchantApiUpdateMerchantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMerchantDetails(requestParameters: MerchantApiUpdateMerchantDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Merchant> {
            return localVarFp.updateMerchantDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewMerchant operation in MerchantApi.
 * @export
 * @interface MerchantApiCreateNewMerchantRequest
 */
export type MerchantApiCreateNewMerchantRequest = {
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof MerchantApiCreateNewMerchant
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof MerchantApiCreateNewMerchant
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof MerchantApiCreateNewMerchant
    */
    readonly partner: string
    
} & MerchantCreateNewMerchantRequest

/**
 * Request parameters for getMerchantDetails operation in MerchantApi.
 * @export
 * @interface MerchantApiGetMerchantDetailsRequest
 */
export type MerchantApiGetMerchantDetailsRequest = {
    
    /**
    * ID of the merchant
    * @type {string}
    * @memberof MerchantApiGetMerchantDetails
    */
    readonly merchantId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof MerchantApiGetMerchantDetails
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof MerchantApiGetMerchantDetails
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof MerchantApiGetMerchantDetails
    */
    readonly partner: string
    
}

/**
 * Request parameters for listAllMerchants operation in MerchantApi.
 * @export
 * @interface MerchantApiListAllMerchantsRequest
 */
export type MerchantApiListAllMerchantsRequest = {
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof MerchantApiListAllMerchants
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof MerchantApiListAllMerchants
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof MerchantApiListAllMerchants
    */
    readonly partner: string
    
    /**
    * Query by page, default 0
    * @type {number}
    * @memberof MerchantApiListAllMerchants
    */
    readonly page?: number
    
    /**
    * Query by page_size, default 100
    * @type {number}
    * @memberof MerchantApiListAllMerchants
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateMerchantDetails operation in MerchantApi.
 * @export
 * @interface MerchantApiUpdateMerchantDetailsRequest
 */
export type MerchantApiUpdateMerchantDetailsRequest = {
    
    /**
    * ID of the merchant
    * @type {string}
    * @memberof MerchantApiUpdateMerchantDetails
    */
    readonly merchantId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof MerchantApiUpdateMerchantDetails
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof MerchantApiUpdateMerchantDetails
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof MerchantApiUpdateMerchantDetails
    */
    readonly partner: string
    
} & MerchantUpdateMerchantDetailsRequest

/**
 * MerchantApiGenerated - object-oriented interface
 * @export
 * @class MerchantApiGenerated
 * @extends {BaseAPI}
 */
export class MerchantApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a merchant
     * @param {MerchantApiCreateNewMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiGenerated
     */
    public createNewMerchant(requestParameters: MerchantApiCreateNewMerchantRequest, options?: AxiosRequestConfig) {
        return MerchantApiFp(this.configuration).createNewMerchant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a merchant
     * @param {MerchantApiGetMerchantDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiGenerated
     */
    public getMerchantDetails(requestParameters: MerchantApiGetMerchantDetailsRequest, options?: AxiosRequestConfig) {
        return MerchantApiFp(this.configuration).getMerchantDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List merchants
     * @param {MerchantApiListAllMerchantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiGenerated
     */
    public listAllMerchants(requestParameters: MerchantApiListAllMerchantsRequest, options?: AxiosRequestConfig) {
        return MerchantApiFp(this.configuration).listAllMerchants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a merchant
     * @param {MerchantApiUpdateMerchantDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiGenerated
     */
    public updateMerchantDetails(requestParameters: MerchantApiUpdateMerchantDetailsRequest, options?: AxiosRequestConfig) {
        return MerchantApiFp(this.configuration).updateMerchantDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
