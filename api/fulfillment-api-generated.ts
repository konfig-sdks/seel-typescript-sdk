/* tslint:disable */
/* eslint-disable */
/*
Seel API

Seel API

The version of the OpenAPI document: 1.3.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Fulfillment } from '../models';
// @ts-ignore
import { FulfillmentLineItemsInner } from '../models';
// @ts-ignore
import { FulfillmentListFulfillmentsResponse } from '../models';
// @ts-ignore
import { FulfillmentUpdateFulfillmentDetailsRequest } from '../models';
// @ts-ignore
import { FulfillmentUpdateFulfillmentDetailsRequestLineItemsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FulfillmentApi - axios parameter creator
 * @export
 */
export const FulfillmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a fulfillment
         * @param {string} orderId ID of the order
         * @param {string} fulfillmentId ID of the fulfillment
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFulfillment: async (orderId: string, fulfillmentId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('cancelFulfillment', 'orderId', orderId)
            // verify required parameter 'fulfillmentId' is not null or undefined
            assertParamExists('cancelFulfillment', 'fulfillmentId', fulfillmentId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('cancelFulfillment', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('cancelFulfillment', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('cancelFulfillment', 'partner', partner)
            const localVarPath = `/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}/cancel`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"fulfillment_id"}}`, encodeURIComponent(String(fulfillmentId !== undefined ? fulfillmentId : `-fulfillment_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}/cancel',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a fulfillment
         * @param {string} orderId ID of the order
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {Fulfillment} fulfillment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFulfillment: async (orderId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, fulfillment: Fulfillment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('createNewFulfillment', 'orderId', orderId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('createNewFulfillment', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('createNewFulfillment', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('createNewFulfillment', 'partner', partner)
            // verify required parameter 'fulfillment' is not null or undefined
            assertParamExists('createNewFulfillment', 'fulfillment', fulfillment)
            const localVarPath = `/{partner}/orders/{order_id}/fulfillments`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fulfillment,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}/fulfillments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fulfillment, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a fulfillment
         * @param {string} orderId ID of the order
         * @param {string} fulfillmentId ID of the fulfillment
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (orderId: string, fulfillmentId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getDetails', 'orderId', orderId)
            // verify required parameter 'fulfillmentId' is not null or undefined
            assertParamExists('getDetails', 'fulfillmentId', fulfillmentId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('getDetails', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('getDetails', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('getDetails', 'partner', partner)
            const localVarPath = `/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"fulfillment_id"}}`, encodeURIComponent(String(fulfillmentId !== undefined ? fulfillmentId : `-fulfillment_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List fulfillments
         * @param {string} orderId ID of the order
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {number} [page] Query by page, default 0
         * @param {number} [pageSize] Query by page_size, default 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments: async (orderId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('listFulfillments', 'orderId', orderId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('listFulfillments', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('listFulfillments', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('listFulfillments', 'partner', partner)
            const localVarPath = `/{partner}/orders/{order_id}/fulfillments`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}/fulfillments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a fulfillment
         * @param {string} orderId ID of the order
         * @param {string} fulfillmentId ID of the fulfillment
         * @param {string} xSeelApiKey Your Seel API key
         * @param {string} xSeelApiVersion Version of the Seel API to use
         * @param {string} partner partner name
         * @param {FulfillmentUpdateFulfillmentDetailsRequest} fulfillmentUpdateFulfillmentDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentDetails: async (orderId: string, fulfillmentId: string, xSeelApiKey: string, xSeelApiVersion: string, partner: string, fulfillmentUpdateFulfillmentDetailsRequest: FulfillmentUpdateFulfillmentDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateFulfillmentDetails', 'orderId', orderId)
            // verify required parameter 'fulfillmentId' is not null or undefined
            assertParamExists('updateFulfillmentDetails', 'fulfillmentId', fulfillmentId)
            // verify required parameter 'xSeelApiKey' is not null or undefined
            assertParamExists('updateFulfillmentDetails', 'xSeelApiKey', xSeelApiKey)
            // verify required parameter 'xSeelApiVersion' is not null or undefined
            assertParamExists('updateFulfillmentDetails', 'xSeelApiVersion', xSeelApiVersion)
            // verify required parameter 'partner' is not null or undefined
            assertParamExists('updateFulfillmentDetails', 'partner', partner)
            // verify required parameter 'fulfillmentUpdateFulfillmentDetailsRequest' is not null or undefined
            assertParamExists('updateFulfillmentDetails', 'fulfillmentUpdateFulfillmentDetailsRequest', fulfillmentUpdateFulfillmentDetailsRequest)
            const localVarPath = `/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-order_id-`)))
                .replace(`{${"fulfillment_id"}}`, encodeURIComponent(String(fulfillmentId !== undefined ? fulfillmentId : `-fulfillment_id-`)))
                .replace(`{${"partner"}}`, encodeURIComponent(String(partner !== undefined ? partner : `-partner-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (xSeelApiKey != null) {
                localVarHeaderParameter['X-Seel-API-Key'] = String(xSeelApiKey);
            }

            if (xSeelApiVersion != null) {
                localVarHeaderParameter['X-Seel-API-Version'] = String(xSeelApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fulfillmentUpdateFulfillmentDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fulfillmentUpdateFulfillmentDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FulfillmentApi - functional programming interface
 * @export
 */
export const FulfillmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FulfillmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel a fulfillment
         * @param {FulfillmentApiCancelFulfillmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelFulfillment(requestParameters: FulfillmentApiCancelFulfillmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fulfillment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelFulfillment(requestParameters.orderId, requestParameters.fulfillmentId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a fulfillment
         * @param {FulfillmentApiCreateNewFulfillmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFulfillment(requestParameters: FulfillmentApiCreateNewFulfillmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fulfillment>> {
            const fulfillment: Fulfillment = {
                fulfillment_id: requestParameters.fulfillment_id,
                created_ts: requestParameters.created_ts,
                updated_ts: requestParameters.updated_ts,
                tracking_number: requestParameters.tracking_number,
                carrier: requestParameters.carrier,
                tracking_url: requestParameters.tracking_url,
                shipment_status: requestParameters.shipment_status,
                line_items: requestParameters.line_items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFulfillment(requestParameters.orderId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, fulfillment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a fulfillment
         * @param {FulfillmentApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: FulfillmentApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fulfillment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.orderId, requestParameters.fulfillmentId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List fulfillments
         * @param {FulfillmentApiListFulfillmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFulfillments(requestParameters: FulfillmentApiListFulfillmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillmentListFulfillmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFulfillments(requestParameters.orderId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a fulfillment
         * @param {FulfillmentApiUpdateFulfillmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFulfillmentDetails(requestParameters: FulfillmentApiUpdateFulfillmentDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fulfillment>> {
            const fulfillmentUpdateFulfillmentDetailsRequest: FulfillmentUpdateFulfillmentDetailsRequest = {
                updated_ts: requestParameters.updated_ts,
                tracking_number: requestParameters.tracking_number,
                carrier: requestParameters.carrier,
                tracking_url: requestParameters.tracking_url,
                shipment_status: requestParameters.shipment_status,
                line_items: requestParameters.line_items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFulfillmentDetails(requestParameters.orderId, requestParameters.fulfillmentId, requestParameters.xSeelApiKey, requestParameters.xSeelApiVersion, requestParameters.partner, fulfillmentUpdateFulfillmentDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FulfillmentApi - factory interface
 * @export
 */
export const FulfillmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FulfillmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel a fulfillment
         * @param {FulfillmentApiCancelFulfillmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFulfillment(requestParameters: FulfillmentApiCancelFulfillmentRequest, options?: AxiosRequestConfig): AxiosPromise<Fulfillment> {
            return localVarFp.cancelFulfillment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a fulfillment
         * @param {FulfillmentApiCreateNewFulfillmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFulfillment(requestParameters: FulfillmentApiCreateNewFulfillmentRequest, options?: AxiosRequestConfig): AxiosPromise<Fulfillment> {
            return localVarFp.createNewFulfillment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a fulfillment
         * @param {FulfillmentApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: FulfillmentApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Fulfillment> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List fulfillments
         * @param {FulfillmentApiListFulfillmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments(requestParameters: FulfillmentApiListFulfillmentsRequest, options?: AxiosRequestConfig): AxiosPromise<FulfillmentListFulfillmentsResponse> {
            return localVarFp.listFulfillments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a fulfillment
         * @param {FulfillmentApiUpdateFulfillmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentDetails(requestParameters: FulfillmentApiUpdateFulfillmentDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Fulfillment> {
            return localVarFp.updateFulfillmentDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelFulfillment operation in FulfillmentApi.
 * @export
 * @interface FulfillmentApiCancelFulfillmentRequest
 */
export type FulfillmentApiCancelFulfillmentRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof FulfillmentApiCancelFulfillment
    */
    readonly orderId: string
    
    /**
    * ID of the fulfillment
    * @type {string}
    * @memberof FulfillmentApiCancelFulfillment
    */
    readonly fulfillmentId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof FulfillmentApiCancelFulfillment
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof FulfillmentApiCancelFulfillment
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof FulfillmentApiCancelFulfillment
    */
    readonly partner: string
    
}

/**
 * Request parameters for createNewFulfillment operation in FulfillmentApi.
 * @export
 * @interface FulfillmentApiCreateNewFulfillmentRequest
 */
export type FulfillmentApiCreateNewFulfillmentRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof FulfillmentApiCreateNewFulfillment
    */
    readonly orderId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof FulfillmentApiCreateNewFulfillment
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof FulfillmentApiCreateNewFulfillment
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof FulfillmentApiCreateNewFulfillment
    */
    readonly partner: string
    
} & Fulfillment

/**
 * Request parameters for getDetails operation in FulfillmentApi.
 * @export
 * @interface FulfillmentApiGetDetailsRequest
 */
export type FulfillmentApiGetDetailsRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof FulfillmentApiGetDetails
    */
    readonly orderId: string
    
    /**
    * ID of the fulfillment
    * @type {string}
    * @memberof FulfillmentApiGetDetails
    */
    readonly fulfillmentId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof FulfillmentApiGetDetails
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof FulfillmentApiGetDetails
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof FulfillmentApiGetDetails
    */
    readonly partner: string
    
}

/**
 * Request parameters for listFulfillments operation in FulfillmentApi.
 * @export
 * @interface FulfillmentApiListFulfillmentsRequest
 */
export type FulfillmentApiListFulfillmentsRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof FulfillmentApiListFulfillments
    */
    readonly orderId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof FulfillmentApiListFulfillments
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof FulfillmentApiListFulfillments
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof FulfillmentApiListFulfillments
    */
    readonly partner: string
    
    /**
    * Query by page, default 0
    * @type {number}
    * @memberof FulfillmentApiListFulfillments
    */
    readonly page?: number
    
    /**
    * Query by page_size, default 100
    * @type {number}
    * @memberof FulfillmentApiListFulfillments
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateFulfillmentDetails operation in FulfillmentApi.
 * @export
 * @interface FulfillmentApiUpdateFulfillmentDetailsRequest
 */
export type FulfillmentApiUpdateFulfillmentDetailsRequest = {
    
    /**
    * ID of the order
    * @type {string}
    * @memberof FulfillmentApiUpdateFulfillmentDetails
    */
    readonly orderId: string
    
    /**
    * ID of the fulfillment
    * @type {string}
    * @memberof FulfillmentApiUpdateFulfillmentDetails
    */
    readonly fulfillmentId: string
    
    /**
    * Your Seel API key
    * @type {string}
    * @memberof FulfillmentApiUpdateFulfillmentDetails
    */
    readonly xSeelApiKey: string
    
    /**
    * Version of the Seel API to use
    * @type {string}
    * @memberof FulfillmentApiUpdateFulfillmentDetails
    */
    readonly xSeelApiVersion: string
    
    /**
    * partner name
    * @type {string}
    * @memberof FulfillmentApiUpdateFulfillmentDetails
    */
    readonly partner: string
    
} & FulfillmentUpdateFulfillmentDetailsRequest

/**
 * FulfillmentApiGenerated - object-oriented interface
 * @export
 * @class FulfillmentApiGenerated
 * @extends {BaseAPI}
 */
export class FulfillmentApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Cancel a fulfillment
     * @param {FulfillmentApiCancelFulfillmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiGenerated
     */
    public cancelFulfillment(requestParameters: FulfillmentApiCancelFulfillmentRequest, options?: AxiosRequestConfig) {
        return FulfillmentApiFp(this.configuration).cancelFulfillment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a fulfillment
     * @param {FulfillmentApiCreateNewFulfillmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiGenerated
     */
    public createNewFulfillment(requestParameters: FulfillmentApiCreateNewFulfillmentRequest, options?: AxiosRequestConfig) {
        return FulfillmentApiFp(this.configuration).createNewFulfillment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a fulfillment
     * @param {FulfillmentApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiGenerated
     */
    public getDetails(requestParameters: FulfillmentApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return FulfillmentApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List fulfillments
     * @param {FulfillmentApiListFulfillmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiGenerated
     */
    public listFulfillments(requestParameters: FulfillmentApiListFulfillmentsRequest, options?: AxiosRequestConfig) {
        return FulfillmentApiFp(this.configuration).listFulfillments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a fulfillment
     * @param {FulfillmentApiUpdateFulfillmentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiGenerated
     */
    public updateFulfillmentDetails(requestParameters: FulfillmentApiUpdateFulfillmentDetailsRequest, options?: AxiosRequestConfig) {
        return FulfillmentApiFp(this.configuration).updateFulfillmentDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
